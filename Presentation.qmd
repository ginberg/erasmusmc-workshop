---
title: "Workshop"
author: "Ger Inberg & Maarten van Kessel"
format: revealjs
editor: visual
---

## Sources
* R Packages (2e), Hadley Wickham and Jennifer Bryan (https://r-pkgs.org/)

* Advanced R, Hadley Wickham (https://adv-r.hadley.nz/)

## Form
![](presentation_files/img/form-1.png)

## Form
![](presentation_files/img/form-2.png)

## Form
![](presentation_files/img/form-3.png)

## Why an R-Package?

1. Share able
2. Standardized
3. Time saving

## Interface

### Exported

```{r exports, echo=TRUE, eval=FALSE}
# Function
dplyr::filter()

# Variables
dplyr::storms
```

### Internal

```{r internal, echo=TRUE, eval=FALSE}
# Class (R6)
dplyr:::Progress

# Environment
dplyr:::env_resolved
```

## Definitions

```{r definition, echo=TRUE, eval=TRUE}
foo <- function(bar, baz) {
  return(bar * baz)
}
```

## Documentation (??foo)

```{r documentation, echo=TRUE, eval=FALSE}
#' foo
#'
#' Multiplies bar and baz.
#'
#' @param bar (`numeric(1)`) to be multiplied by baz.
#' @param baz (`numeric(1)`) Multiplies bar.
#'
#' @export
#'
#' @return bar * baz
#'
#' @examples
#' foo(bar = 2, baz = 3)
foo <- function(bar, baz) {
  return(bar * baz)
}
```

Windows: `alt` + `ctrl` + `shift` + `R`

MacOS: `alt` + `command` + `shift` + `R`

Rstudio: `Code` -\> `Insert Roxygen Skeleton`

## Vignettes
* Longform documentation as to how to use your R-package.

```{r vignette, echo=TRUE, eval=FALSE}
usethis::use_vignette()
```


```{r comment=""}
"The function `foo()` returns the product of ${bar\times{baz}}$"
"```{r fooExample, echo=TRUE}"
"foo(bar = 2, baz = 3)"
"```"
```

The function `foo()` returns the product of ${bar\times{baz}}$
```{r fooExample, echo=TRUE}
foo(bar = 2, baz = 3)
```

## Package website
* A website that hosts your vignettes

```{r website, echo=TRUE, eval=FALSE}
pkgdown::build_site()
```


<iframe src="https://dplyr.tidyverse.org/" height="60%" width="100%">

</iframe>

## Input checking

```{r, eval=TRUE, echo=TRUE}
#' foo
#'
#' Multiplies bar and baz.
#'
#' @param bar (`numeric(1)`) to be multiplied by baz.
#' @param baz (`numeric(1)`) Multiplies bar.
#'
#' @import checkmate
#'
#' @export
#'
#' @return bar * baz
#'
#' @examples
#' foo(bar = 2, baz = 3)
foo <- function(bar, baz) {
  assertions <- checkmate::makeAssertCollection()
  checkmate::assertNumeric(
    bar, finite = TRUE, null.ok = FALSE, len = 1, add = assertions)
  checkmate::assertNumeric(
    baz, finite = TRUE, null.ok = FALSE, len = 1, add = assertions)
  checkmate::reportAssertions(assertions)
  
  return(bar * baz)
}
```

## The DESCRIPTION file

```         
Package: fooPackage
Title: Multiply Bar and Baz
Version: 0.0.0.9000
Authors@R: 
    person("First", "Last", , "first.last@example.com", role = c("aut", "cre"),
           comment = c(ORCID = "YOUR-ORCID-ID"))
Description: Multiply bar and baz with function foo.
License: Apache License (≥ 2), MIT, GPL-2
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.2.3
```

```{r, echo=TRUE, eval=FALSE}
usethis::use_author(given = "Ger", family = "Inberg", role = c("aut", "cre"))
usethis::use_apache_license()
usethis::use_package("checkmate", type = "Imports")
usethis::use_dev_package(remote = "OHDSI/Eunomia", type = "Suggests")

# Updates Documentation, DESCRIPTION, and NAMESPACE files.
roxygen2::roxygenise()
```

## DESCRIPTION on CRAN

<iframe src="https://cran.r-project.org/web/packages/dplyr/index.html" width="100%" height="80%">

</iframe>

## The NAMESPACE file
```
# Generated by roxygen2: do not edit by hand

S3method("$<-",grouped_df)
S3method("[",fun_list)
...
import(rlang)
import(vctrs, except = data_frame)
...
importFrom(R6,R6Class)
importFrom(generics,intersect)
importFrom(generics,setdiff)
...
export("%>%")
export(filter)
...
```

## Unit Testing

### setup.R

```{r setup, echo=TRUE, eval=TRUE}
connectionDetails <- Eunomia::getEunomiaConnectionDetails()
connection <- DatabaseConnector::connect(connectionDetails)
```

## Unit Testing

### test-foo.R

```{r test-foo, echo=TRUE, eval=TRUE}
library(testthat)
library(DatabaseConnector)

test_that("Normal use", {
  expect_equal(foo(1, 2), 1 * 2)
})

test_that("Fetch n persons", {
  res <- renderTranslateQuerySql(
    connection = connection,
    sql = "SELECT COUNT(*) FROM person;") |> 
    unlist() |>
    unname()
  
  expect_equal(res, 2694)
})
```

## Unit Testing

### teardown.R

```{r teardown, echo=TRUE, eval=TRUE}
DatabaseConnector::disconnect(connection)
```

## Validating your package

```{r, eval=FALSE, echo=TRUE}
devtools::check()
devtools::check_win_devel()
devtools::check_rhub()
```

<iframe src="https://www.r-project.org/nosvn/R.check/r-release-windows-x86_64/dplyr-00check.html" height="70%" width="100%">

</iframe>


## Pushing to GitHub
```
git add <files>
git status
git commit -m "Commit message describing changes"
git push
```

![](presentation_files/img/actions.png)


## Releasing your package to CRAN
```{r release, eval=FALSE, echo=TRUE}
devtools::release()
```

The package release process will:


* Confirm that the package passes ⁠R CMD check⁠ on relevant platforms

* Confirm that important files are up-to-date

* Build the package

* Submit the package to CRAN, using comments in "cran-comments.md"
